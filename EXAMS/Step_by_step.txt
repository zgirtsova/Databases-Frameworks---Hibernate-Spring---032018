1. POM and application.properties

2. We make Entities:
 - задължително getters and setters
 - empty Constructor and a normal one
 
 
	@ManyToOne(cascade = CascadeType.PERSIST, fetch = fetchType.EAGER
    @JoinColumn(name = "secondary_camera")
    private BasicCamera secondaryCamera;
	

3. Repositories - анотация @Repository extends JpaRepository/CrudRepository и даваме класа.


4. Service - wrapper(interface), който ще извика методите ви в репозиторито и ще ги изпълни. Пишем методите, които на нас
ни трябват. Създава Entity, той не работи с DTO-то, той получава Entity-то след Mapper-а. В Service-а викаме
репозиторито и имплементираме тези методи, които са ни за връзка с базата. Дефинират какво искате да изпълните
и комуникира с базата, там пишем бизнес логиката.

5. ServiceImpl - имплементира Service, и всички методи, които да имплементираме от интерфейса. Всичко, което прави
е да вика репозиторито (което сме дефинирали отгоре с @Autowired), да му кажем, че е @Service, @Transactional:

@Service
@Transactional
public class CameraServiceImpl implements CameraService {

    @Autowired
    private BasicCameraRepository basicCameraRepository;
	
	
Можем да направим конструктор.
	
6. DTO - зависят от това как ще комуникираме с базата. Правим файл с константи за пътищата към различните
файлове. Копираме буквално всички фийлдове от ентитито и гледаме в json дали съответстват. Името на всеки
фийлд в dto-то трябав да съответства на това от Json.












 